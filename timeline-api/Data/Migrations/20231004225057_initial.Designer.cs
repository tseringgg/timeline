// <auto-generated />
using System;
using Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(TimelinesDbContext))]
    [Migration("20231004225057_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Tibet"
                        },
                        new
                        {
                            CountryId = 2,
                            Name = "China"
                        },
                        new
                        {
                            CountryId = 3,
                            Name = "India"
                        },
                        new
                        {
                            CountryId = 4,
                            Name = "Nepal"
                        },
                        new
                        {
                            CountryId = 5,
                            Name = "Bhutan"
                        },
                        new
                        {
                            CountryId = 6,
                            Name = "Pakistan"
                        },
                        new
                        {
                            CountryId = 7,
                            Name = "Mongolia"
                        });
                });

            modelBuilder.Entity("Data.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("date");

                    b.Property<int?>("ApproverUserId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Era")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("date");

                    b.Property<int?>("LastUpdaterUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("date");

                    b.Property<int?>("ReviewerUserId")
                        .HasColumnType("int");

                    b.Property<int>("TimelineId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("ApproverUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LastUpdaterUserId");

                    b.HasIndex("ReviewerUserId");

                    b.HasIndex("TimelineId");

                    b.HasIndex(new[] { "Title", "CountryId", "Era" }, "UC_Event")
                        .IsUnique();

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Data.Entities.Event_Tag", b =>
                {
                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasIndex("EventId");

                    b.HasIndex("TagId");

                    b.ToTable("Event_Tag");
                });

            modelBuilder.Entity("Data.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("ImageId");

                    b.HasIndex("EventId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Data.Entities.Reference", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReferenceId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("ReferenceId");

                    b.HasIndex("EventId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("Data.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Data.Entities.Timeline", b =>
                {
                    b.Property<int>("TimelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimelineId"));

                    b.Property<int>("CenturyId")
                        .HasColumnType("int");

                    b.Property<string>("Era")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("TimelineId");

                    b.HasIndex(new[] { "Era", "CenturyId" }, "UC_Timeline")
                        .IsUnique();

                    b.ToTable("Timeline");

                    b.HasData(
                        new
                        {
                            TimelineId = 1,
                            CenturyId = 1,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 2,
                            CenturyId = 200,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 3,
                            CenturyId = 300,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 4,
                            CenturyId = 400,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 5,
                            CenturyId = 500,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 6,
                            CenturyId = 600,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 7,
                            CenturyId = 700,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 8,
                            CenturyId = 800,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 9,
                            CenturyId = 900,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 10,
                            CenturyId = 1000,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 11,
                            CenturyId = 1100,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 12,
                            CenturyId = 1200,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 13,
                            CenturyId = 1300,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 14,
                            CenturyId = 1400,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 15,
                            CenturyId = 1500,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 16,
                            CenturyId = 1600,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 17,
                            CenturyId = 1700,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 18,
                            CenturyId = 1800,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 19,
                            CenturyId = 1900,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 20,
                            CenturyId = 2000,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 21,
                            CenturyId = 100,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 22,
                            CenturyId = 2100,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 23,
                            CenturyId = 2200,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 24,
                            CenturyId = 2300,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 25,
                            CenturyId = 2400,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 26,
                            CenturyId = 2500,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 27,
                            CenturyId = 2600,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 28,
                            CenturyId = 2700,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 29,
                            CenturyId = 2800,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 30,
                            CenturyId = 2900,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 31,
                            CenturyId = 3000,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 32,
                            CenturyId = 3100,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 33,
                            CenturyId = 3200,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 34,
                            CenturyId = 3300,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 35,
                            CenturyId = 3400,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 36,
                            CenturyId = 3500,
                            Era = "BC"
                        },
                        new
                        {
                            TimelineId = 37,
                            CenturyId = 1,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 38,
                            CenturyId = 100,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 39,
                            CenturyId = 200,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 40,
                            CenturyId = 300,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 41,
                            CenturyId = 400,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 42,
                            CenturyId = 500,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 43,
                            CenturyId = 600,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 44,
                            CenturyId = 700,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 45,
                            CenturyId = 800,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 46,
                            CenturyId = 900,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 47,
                            CenturyId = 1000,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 48,
                            CenturyId = 1100,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 49,
                            CenturyId = 1200,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 50,
                            CenturyId = 1300,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 51,
                            CenturyId = 1400,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 52,
                            CenturyId = 1500,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 53,
                            CenturyId = 1600,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 54,
                            CenturyId = 1700,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 55,
                            CenturyId = 1800,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 56,
                            CenturyId = 1900,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 57,
                            CenturyId = 2000,
                            Era = "AD"
                        },
                        new
                        {
                            TimelineId = 58,
                            CenturyId = 2100,
                            Era = "AD"
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Middle_Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Middle Name");

                    b.Property<string>("UserPrincipalName")
                        .HasMaxLength(60)
                        .HasColumnType("nchar(60)")
                        .IsFixedLength();

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "dhawa.ngoche@hotmail.com",
                            FirstName = "Dhawa",
                            IsDeleted = false,
                            LastName = "Ngoche",
                            Middle_Name = "Dhondup",
                            UserPrincipalName = "kkssadmin@11lypf.onmicrosoft.com"
                        });
                });

            modelBuilder.Entity("Data.Entities.Event", b =>
                {
                    b.HasOne("Data.Entities.User", "ApproverUser")
                        .WithMany("EventApproverUser")
                        .HasForeignKey("ApproverUserId");

                    b.HasOne("Data.Entities.Country", "Country")
                        .WithMany("Event")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Country");

                    b.HasOne("Data.Entities.User", "CreatorUser")
                        .WithMany("EventCreatorUser")
                        .HasForeignKey("CreatorUserId")
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "LastUpdaterUser")
                        .WithMany("EventLastUpdaterUser")
                        .HasForeignKey("LastUpdaterUserId");

                    b.HasOne("Data.Entities.User", "ReviewerUser")
                        .WithMany("EventReviewerUser")
                        .HasForeignKey("ReviewerUserId");

                    b.HasOne("Data.Entities.Timeline", "Timeline")
                        .WithMany("Event")
                        .HasForeignKey("TimelineId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Timeline");

                    b.Navigation("ApproverUser");

                    b.Navigation("Country");

                    b.Navigation("CreatorUser");

                    b.Navigation("LastUpdaterUser");

                    b.Navigation("ReviewerUser");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("Data.Entities.Event_Tag", b =>
                {
                    b.HasOne("Data.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Event_Tag_Event");

                    b.HasOne("Data.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Tag_Tag");

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Data.Entities.Image", b =>
                {
                    b.HasOne("Data.Entities.Event", "Event")
                        .WithMany("Image")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Image_Image");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Data.Entities.Reference", b =>
                {
                    b.HasOne("Data.Entities.Event", "Event")
                        .WithMany("Reference")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Reference_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Data.Entities.Country", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("Data.Entities.Event", b =>
                {
                    b.Navigation("Image");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("Data.Entities.Timeline", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("EventApproverUser");

                    b.Navigation("EventCreatorUser");

                    b.Navigation("EventLastUpdaterUser");

                    b.Navigation("EventReviewerUser");
                });
#pragma warning restore 612, 618
        }
    }
}
