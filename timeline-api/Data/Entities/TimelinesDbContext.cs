// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Data.Entities.Configurations;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
#nullable disable

namespace Data.Entities;

public partial class TimelinesDbContext : DbContext, ITimelinesDbContext
{
    public TimelinesDbContext()
    {
    }

    public TimelinesDbContext(DbContextOptions<TimelinesDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<Event> Event { get; set; }

    public virtual DbSet<Event_Tag> Event_Tag { get; set; }

    public virtual DbSet<Image> Image { get; set; }

    public virtual DbSet<Reference> Reference { get; set; }

    public virtual DbSet<Tag> Tag { get; set; }

    public virtual DbSet<Timeline> Timeline { get; set; }

    public virtual DbSet<User> User { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=.\\sql2019dev;Initial Catalog=timeline;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new Configurations.CountryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EventConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Event_TagConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ImageConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ReferenceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TagConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TimelineConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserConfiguration());

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);

        /** Seed database tables */
        SeedTimelineTable(modelBuilder);
        SeedCountryTable(modelBuilder);
        SeedUserTable(modelBuilder);
    }

    private static void SeedUserTable(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<User>().HasData(
         new User { FirstName = "Dhawa", LastName = "Ngoche", Middle_Name = "Dhondup", Email = "dhawa.ngoche@hotmail.com", UserPrincipalName = "kkssadmin@11lypf.onmicrosoft.com", IsDeleted = false }
         );
    }

    private static void SeedCountryTable(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Timeline>().HasData(
         new Country { Name = "Tibet" },
         new Country { Name = "China" },
         new Country { Name = "India" },
         new Country { Name = "Nepal" },
         new Country { Name = "Bhutan" },
         new Country { Name = "Pakistan" },
         new Country { Name = "Mongolia" }
        );
    }

    private static void SeedTimelineTable(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Timeline>().HasData(
             new Timeline { CenturyId = 1, Era = "BC" },
             new Timeline { CenturyId = 100, Era = "BC" },
             new Timeline { CenturyId = 200, Era = "BC" },
             new Timeline { CenturyId = 300, Era = "BC" },
             new Timeline { CenturyId = 400, Era = "BC" },
             new Timeline { CenturyId = 500, Era = "BC" },
             new Timeline { CenturyId = 600, Era = "BC" },
             new Timeline { CenturyId = 700, Era = "BC" },
             new Timeline { CenturyId = 800, Era = "BC" },
             new Timeline { CenturyId = 900, Era = "BC" },
             new Timeline { CenturyId = 1000, Era = "BC" },
             new Timeline { CenturyId = 1100, Era = "BC" },
             new Timeline { CenturyId = 1200, Era = "BC" },
             new Timeline { CenturyId = 1300, Era = "BC" },
             new Timeline { CenturyId = 1400, Era = "BC" },
             new Timeline { CenturyId = 1500, Era = "BC" },
             new Timeline { CenturyId = 1600, Era = "BC" },
             new Timeline { CenturyId = 1700, Era = "BC" },
             new Timeline { CenturyId = 1800, Era = "BC" },
             new Timeline { CenturyId = 1900, Era = "BC" },
             new Timeline { CenturyId = 2000, Era = "BC" },
             new Timeline { CenturyId = 2100, Era = "BC" },
             new Timeline { CenturyId = 2200, Era = "BC" },
             new Timeline { CenturyId = 2300, Era = "BC" },
             new Timeline { CenturyId = 2400, Era = "BC" },
             new Timeline { CenturyId = 2500, Era = "BC" },
             new Timeline { CenturyId = 2600, Era = "BC" },
             new Timeline { CenturyId = 2700, Era = "BC" },
             new Timeline { CenturyId = 2800, Era = "BC" },
             new Timeline { CenturyId = 2900, Era = "BC" },
             new Timeline { CenturyId = 3000, Era = "BC" },
             new Timeline { CenturyId = 3100, Era = "BC" },
             new Timeline { CenturyId = 3200, Era = "BC" },
             new Timeline { CenturyId = 3300, Era = "BC" },
             new Timeline { CenturyId = 3400, Era = "BC" },
             new Timeline { CenturyId = 3500, Era = "BC" },

             new Timeline { CenturyId = 1, Era = "AD" },
             new Timeline { CenturyId = 100, Era = "AD" },
             new Timeline { CenturyId = 200, Era = "AD" },
             new Timeline { CenturyId = 300, Era = "AD" },
             new Timeline { CenturyId = 400, Era = "AD" },
             new Timeline { CenturyId = 500, Era = "AD" },
             new Timeline { CenturyId = 600, Era = "AD" },
             new Timeline { CenturyId = 700, Era = "AD" },
             new Timeline { CenturyId = 800, Era = "AD" },
             new Timeline { CenturyId = 900, Era = "AD" },
             new Timeline { CenturyId = 1000, Era = "AD" },
             new Timeline { CenturyId = 1100, Era = "AD" },
             new Timeline { CenturyId = 1200, Era = "AD" },
             new Timeline { CenturyId = 1300, Era = "AD" },
             new Timeline { CenturyId = 1400, Era = "AD" },
             new Timeline { CenturyId = 1500, Era = "AD" },
             new Timeline { CenturyId = 1600, Era = "AD" },
             new Timeline { CenturyId = 1700, Era = "AD" },
             new Timeline { CenturyId = 1800, Era = "AD" },
             new Timeline { CenturyId = 1900, Era = "AD" },
             new Timeline { CenturyId = 2000, Era = "AD" },
             new Timeline { CenturyId = 2100, Era = "AD" }
         );
    }

    public async override Task<int> SaveChangesAsync(CancellationToken cancellationToken)
    {
        return await base.SaveChangesAsync(cancellationToken);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
